// Copyright lowRISC contributors.
// Licensed under the Apache License, Version 2.0, see LICENSE for details.
// SPDX-License-Identifier: Apache-2.0
//
// Register Package auto-generated by `reggen` containing data structure

package safe_wrapper_ctrl_reg_pkg;

  // Address widths within the block
  parameter int BlockAw = 6;

  ////////////////////////////
  // Typedefs for registers //
  ////////////////////////////

  typedef struct packed {
    logic [1:0]  q;
  } safe_wrapper_ctrl_reg2hw_safe_configuration_reg_t;

  typedef struct packed {
    logic        q;
  } safe_wrapper_ctrl_reg2hw_safe_mode_reg_t;

  typedef struct packed {
    logic [2:0]  q;
  } safe_wrapper_ctrl_reg2hw_master_core_reg_t;

  typedef struct packed {
    logic        q;
  } safe_wrapper_ctrl_reg2hw_critical_section_reg_t;

  typedef struct packed {
    logic        q;
  } safe_wrapper_ctrl_reg2hw_initial_sync_master_reg_t;

  typedef struct packed {
    logic        q;
  } safe_wrapper_ctrl_reg2hw_end_sw_routine_reg_t;

  typedef struct packed {
    logic [1:0]  d;
    logic        de;
  } safe_wrapper_ctrl_hw2reg_safe_configuration_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } safe_wrapper_ctrl_hw2reg_safe_mode_reg_t;

  typedef struct packed {
    logic [2:0]  d;
    logic        de;
  } safe_wrapper_ctrl_hw2reg_master_core_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } safe_wrapper_ctrl_hw2reg_critical_section_reg_t;

  typedef struct packed {
    logic [1:0]  d;
    logic        de;
  } safe_wrapper_ctrl_hw2reg_external_debug_req_reg_t;

  typedef struct packed {
    logic        d;
    logic        de;
  } safe_wrapper_ctrl_hw2reg_end_sw_routine_reg_t;

  typedef struct packed {
    logic [31:0] d;
    logic        de;
  } safe_wrapper_ctrl_hw2reg_entry_address_reg_t;

  // Register -> HW type
  typedef struct packed {
    safe_wrapper_ctrl_reg2hw_safe_configuration_reg_t safe_configuration; // [8:7]
    safe_wrapper_ctrl_reg2hw_safe_mode_reg_t safe_mode; // [6:6]
    safe_wrapper_ctrl_reg2hw_master_core_reg_t master_core; // [5:3]
    safe_wrapper_ctrl_reg2hw_critical_section_reg_t critical_section; // [2:2]
    safe_wrapper_ctrl_reg2hw_initial_sync_master_reg_t initial_sync_master; // [1:1]
    safe_wrapper_ctrl_reg2hw_end_sw_routine_reg_t end_sw_routine; // [0:0]
  } safe_wrapper_ctrl_reg2hw_t;

  // HW -> register type
  typedef struct packed {
    safe_wrapper_ctrl_hw2reg_safe_configuration_reg_t safe_configuration; // [48:46]
    safe_wrapper_ctrl_hw2reg_safe_mode_reg_t safe_mode; // [45:44]
    safe_wrapper_ctrl_hw2reg_master_core_reg_t master_core; // [43:40]
    safe_wrapper_ctrl_hw2reg_critical_section_reg_t critical_section; // [39:38]
    safe_wrapper_ctrl_hw2reg_external_debug_req_reg_t external_debug_req; // [37:35]
    safe_wrapper_ctrl_hw2reg_end_sw_routine_reg_t end_sw_routine; // [34:33]
    safe_wrapper_ctrl_hw2reg_entry_address_reg_t entry_address; // [32:0]
  } safe_wrapper_ctrl_hw2reg_t;

  // Register offsets
  parameter logic [BlockAw-1:0] SAFE_WRAPPER_CTRL_SAFE_CONFIGURATION_OFFSET = 6'h 0;
  parameter logic [BlockAw-1:0] SAFE_WRAPPER_CTRL_SAFE_MODE_OFFSET = 6'h 4;
  parameter logic [BlockAw-1:0] SAFE_WRAPPER_CTRL_MASTER_CORE_OFFSET = 6'h 8;
  parameter logic [BlockAw-1:0] SAFE_WRAPPER_CTRL_CRITICAL_SECTION_OFFSET = 6'h c;
  parameter logic [BlockAw-1:0] SAFE_WRAPPER_CTRL_EXTERNAL_DEBUG_REQ_OFFSET = 6'h 10;
  parameter logic [BlockAw-1:0] SAFE_WRAPPER_CTRL_INITIAL_SYNC_MASTER_OFFSET = 6'h 14;
  parameter logic [BlockAw-1:0] SAFE_WRAPPER_CTRL_END_SW_ROUTINE_OFFSET = 6'h 18;
  parameter logic [BlockAw-1:0] SAFE_WRAPPER_CTRL_ENTRY_ADDRESS_OFFSET = 6'h 1c;
  parameter logic [BlockAw-1:0] SAFE_WRAPPER_CTRL_SAFE_COPY_ADDRESS_OFFSET = 6'h 20;

  // Register index
  typedef enum int {
    SAFE_WRAPPER_CTRL_SAFE_CONFIGURATION,
    SAFE_WRAPPER_CTRL_SAFE_MODE,
    SAFE_WRAPPER_CTRL_MASTER_CORE,
    SAFE_WRAPPER_CTRL_CRITICAL_SECTION,
    SAFE_WRAPPER_CTRL_EXTERNAL_DEBUG_REQ,
    SAFE_WRAPPER_CTRL_INITIAL_SYNC_MASTER,
    SAFE_WRAPPER_CTRL_END_SW_ROUTINE,
    SAFE_WRAPPER_CTRL_ENTRY_ADDRESS,
    SAFE_WRAPPER_CTRL_SAFE_COPY_ADDRESS
  } safe_wrapper_ctrl_id_e;

  // Register width information to check illegal writes
  parameter logic [3:0] SAFE_WRAPPER_CTRL_PERMIT [9] = '{
    4'b 0001, // index[0] SAFE_WRAPPER_CTRL_SAFE_CONFIGURATION
    4'b 0001, // index[1] SAFE_WRAPPER_CTRL_SAFE_MODE
    4'b 0001, // index[2] SAFE_WRAPPER_CTRL_MASTER_CORE
    4'b 0001, // index[3] SAFE_WRAPPER_CTRL_CRITICAL_SECTION
    4'b 0001, // index[4] SAFE_WRAPPER_CTRL_EXTERNAL_DEBUG_REQ
    4'b 0001, // index[5] SAFE_WRAPPER_CTRL_INITIAL_SYNC_MASTER
    4'b 0001, // index[6] SAFE_WRAPPER_CTRL_END_SW_ROUTINE
    4'b 1111, // index[7] SAFE_WRAPPER_CTRL_ENTRY_ADDRESS
    4'b 1111  // index[8] SAFE_WRAPPER_CTRL_SAFE_COPY_ADDRESS
  };

endpackage

